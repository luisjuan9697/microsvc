pipeline {
    agent any
    
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
        NVD_API_KEY = credentials('nvd-api-key')
        GIT_REPO_NAME = "microsvc"
        GIT_USER_NAME = "luisjuan9697"
        GIT_BRANCH = 'main'
        GIT_TOKEN = 'tokens' 
    }
    
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[credentialsId: 'GITHUB', url: 'https://github.com/luisjuan9697/microsvc.git']]])
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                dir('appfile') {
                    withSonarQubeEnv('sonar-server') {
                        sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=microsvc -Dsonar.projectKey=microsvc"
                    }
                }
            }
        }
        
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        
        stage('Trivy File Scan') {
            steps {
                dir('appfile') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        
        stage("Docker Image Build") {
            steps {
                script {
                    dir('appfile') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh "docker build -t ${AWS_ECR_REPO_NAME} ."
                    }
                }
            }
        }
        
        stage("ECR Image Pushing") {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}"
                    sh "docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                    sh "docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                }
            }
        }
        
        stage("TRIVY Image Scan") {
            steps {
                sh "trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt"
            }
        }
        
        stage('Update Helm Chart Values') {
            steps {
                script {
                    // Configure git user details
                    sh 'git config user.email "lluisjuanguerrero@gmail.com"'
                    sh 'git config user.name "luisjuan9697"'
                    
                    // Get the Jenkins build number
                    def buildNumber = env.BUILD_NUMBER
                    
                    // Update image tag in values.yaml to match build number
                    sh '''
                    sed -i 's/tag:.*/tag: "${buildNumber}"/' helm/myapp/values.yaml
                    '''
                    
                    sh 'cat helm/myapp/values.yaml'
                    
                    // Add values.yaml to git staging
                    sh 'git add helm/myapp/values.yaml'
                    
                    // Commit the changes with a descriptive message
                    sh "git commit -m 'Update image tag to ${buildNumber} in Helm chart values.yaml'"
                    
                    // Push the commit to the remote repository
                    sh "git push https://token@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main"
                }
            }
        }
    }
}
